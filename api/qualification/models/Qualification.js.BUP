'use strict';

const axios = require('axios');
const type='Qualification';

  async function send(method,mode,id, msgbody) {
    try {
      const dest=strapi.config.currentEnvironment.skillsBackendURL+type.toLowerCase()+'/'+id+'/'+mode;
      console.log('Send dest:'+dest);
      const resp = await method(dest, msgbody);

      console.log('Send resp:'+resp.status);

    } catch(error) {
      strapi.log.error('send error '+error);
      throw new Error('send to skillsDB failed'); 
    }
  }

  async function getBusnObj(id) {
    const criteria={_id: id};
    strapi.log.info('criteria '+JSON.stringify(criteria)); 

    const promise=global[type]['findOne'](criteria).exec();  
    //const promise=Qualification.findOne(criteria).exec();  
    const busnobj=await promise;

    strapi.log.info('test busnobj '+JSON.stringify(busnobj));

    return busnobj;
  }

  async function addCategory(update) {
    const catcriteria={_id: update.category};
    strapi.log.info('catcriteria '+JSON.stringify(catcriteria)); 

    const categorypromise=Category.findOne(catcriteria).exec();  
    const category=await categorypromise;

    strapi.log.info('category '+JSON.stringify(category));

    var msgbody=JSON.parse(JSON.stringify(update));
    msgbody.$set=undefined;
    msgbody.$setOnInsert=undefined;
    msgbody.category=category;

    return msgbody;
  }

/**
 * Lifecycle callbacks for the `Cmdmodel` model.
 */

module.exports = {

  // This is for true UPDATES it only fires once saved without error 
  afterUpdate: async (model,result) => {
    if(Object.keys(model._update).length<=3) {
      // update follows create to set key
      strapi.log.info('ignoring as update is key only');
      return;
    }

    var msgbody=await addCategory(model._update);
    await send(axios.put,'after',model._id,msgbody);
  },

  // This is for CREATE 
  // use it if we hand off to the main site to report errors
  beforeCreate: async (model) => {
    strapi.log.info('beforeCreate '+JSON.stringify(model));
    var msgbody=await addCategory(model);
    await send(axios.post,'before',model.id,msgbody);
  },
  
  // This is for UPDATE when we can hand off to the main site 
  // This is for CREATE it only fires once saved without error 
  // use it if we CAN'T hand off to the main site to report errors
  // but rather want to be 100% sure it is committed locally
  beforeUpdate: async (model) => {
    strapi.log.info('beforeUpdate '+JSON.stringify(model._update));

    if(Object.keys(model._update).length<=1) {
      // update follows create to set key
      var savedrest=await getBusnObj(model._update.id);

      if(savedrest!=null) {
        strapi.log.info('beforeUpdate test failed');
        var msgbody=await addCategory(savedrest);
        await send(axios.post,'after',model._update.id,msgbody);
      }
    } else {
      var msgbody=await addCategory(model._update);
      await send(axios.put,'before',model._update.id,msgbody);
    }
  }

};
